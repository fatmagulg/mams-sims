---
title: "Simulations_MAMS"
format: html
editor: visual
---

# Multi-Arm Multi-Stage Trial Simulation

```{r}
library(ldbounds)
```

## Two-stage multi-arm trial simulator function

```{r two-stage mams trial simulator}
twostage_simulator <- function(mu, sd, n){
  # mu: vector of means for each group including control
  # sd: common standard deviation
  # n: vector of sample sizes across stages 
  
  # number of hypothesis tests at first interim:
  n_tests <- length(mu) - 1
  
  y <- list()
  Z <- numeric(length = n_tests)

  ## STAGE 1 ##
  for (i in 1:length(mu)) {
    y[[i]] <- rnorm(n = n[1], mean = mu[i], sd = sd)
  }

  for(i in 1:n_tests){ 
    Z[i] <- (mean(y[[i+1]]) - mean(y[[1]])) / sqrt(2 * sd^2 / n[1])
  }
  
  ## Interim 1: check against efficacy and futility boundaries
  alpha_bonf <- 0.05 / n_tests # bonferroni adjustment for number of tests at each analysis
  boundaries <- ldBounds(t = c(0.634, 1), alpha = alpha_bonf, sides = 1, iuse = 1)
  
  cat("Stage 1. Number of treatments:", n_tests,"\n")
  
  for(i in 1:n_tests){
    if (Z[i] > boundaries$upper.bounds[1]){
      cat("Treatment", i, ": Reject H0. Past efficacy boundary \n")
      }
    else{
      cat("Treatment", i, ": Do not reject H0 \n")
      y <- y[-i] # remove the sample for treatment i from the data vector
      }
  }
  
  cat("\n")
  ### STAGE 2 ###
  n_tests = length(y) - 1
  cat("Stage 2. Number of treatments:", n_tests,"\n")
  
  for (i in 1:length(y)) {
    y[[i]] <- c(y[[i]], rnorm(n = n[2], mean = mu[i], sd = sd))
  }
  
  for(i in 1:n_tests){ 
    Z[i] <- (mean(y[[i+1]]) - mean(y[[1]])) / sqrt(2 * sd^2 / (n[1])+n[2])
  }
  
  for(i in 1:n_tests){
    if (Z[i] > boundaries$upper.bounds[2]){
      cat("Treatment", i, ": Reject H0. Past efficacy boundary \n")
      }
    else{
      cat("Treatment", i, ": Do not reject H0 \n")
      }
  }  
}
```

```{r}
mu <- c(0, 0.2, 0.05)
n <- c(66,38)

twostage_simulator(mu = mu, sd = 0.3, n = n)
```

## General MAMS trial simulator function

Define a MAMS trial simulator function that takes three arguments: mu, sd, and n.

mu: vector of means for each group, where the first element must correspond to the control group

sd: common standard deviation across groups

n: vector of per-arm sample sizes at each interim, i.e. $n_i$ is the sample size for all arms at interim $i$.

The Type-I error rate is adjusted for multiple hypotheses using a Bonferroni adjustment, as well as for repeated analyses using a Lan-DeMetz alpha-spending function with OBF efficacy boundaries.

**Return objects:**

stopped_stage: stage that the trial was stopped at

effective_treatment: experimental treatment that is recommended as a result of the trial

boundaries: the boundary used at the final stage to compare Z values against

Z: Z values of the experimental treatments at the final analysis

**Quantities of interest:**

$PET(\delta)$**:** Probability of early termination of the trial

$\mathbb{E}(N|\delta)$**:** Expected sample size

```{r mams trial simulator}
mams_simulator <- function(mu, sd, n, silent = TRUE){
  # mu: vector of means for each group including control
  # sd: common standard deviation
  # n: vector of sample sizes across stages 
  
  J <- length(n) # number of stages
  K <- length(mu) - 1 # number of treatment arms i.e. number of hypothesis tests
  
  # indices for control and active experimental treatments
  control_id <- 1
  active_id <- 2:length(mu)
  
  # initialise list to store data vectors
  y <- vector("list", length = length(mu))  
  
  
  # Calculate efficacy boundary: Lan-DeMetz alpha-spending function
  #  alpha Bonferroni-adjusted for both multiple testing and multiple interims
  alpha_bonf <- 0.05 / K 
  e_boundaries <- ldBounds(t = cumsum(n)/sum(n), alpha = alpha_bonf, sides = 1, iuse = 1)
  f_bound <- 0
  
  # loop over stages 
  for(j in 1:J){
    if(silent == FALSE){cat("Stage", j, ". Number of treatments:", length(active_id),"\n")}
    
    ## simulate samples for stage j and add on to existing samples
    y[[control_id]] <- c(y[[control_id]], rnorm(n=n[j], mean = mu[control_id], sd = sd)) # control arm
    for (i in active_id) { # treatment arms 
      y[[i]] <- c(y[[i]], rnorm(n = n[j], mean = mu[i], sd = sd)) 
    }
    
    # compute Z statistics for each treatment with control and against efficacy boundary
    Z <- numeric(length(active_id))
    keep <- logical(length = length(active_id))
    
    # compute Z statistics for all treatments 
    for(k in seq_along(active_id)){ 
      i <- active_id[k]
      
      Z[k] <- (mean(y[[i]]) - mean(y[[control_id]])) / sqrt(2 * sd^2 / sum(n[1:j]))
    }
    
    # check Z statistics against stopping boundaries
    for(k in seq_along(active_id)){ 
      i <- active_id[k]
      if(Z[k] > e_boundaries$upper.bounds[j]){
        if(silent == FALSE){
          cat("Treatment", i-1, ": Reject H0. Past efficacy boundary \n")}
      }
      if(Z[k] < e_boundaries$upper.bounds[j] & Z[k] >= f_bound){
        if(silent == FALSE){
          cat("Treatment", i-1, ": Do not reject H0. Within continuation boundaries\n")}
        keep[k] <- TRUE
      }
      if(Z[k] < f_bound){
        if(silent == FALSE){
          cat("Treatment", i-1, ": Reject H0. Drop treatment for futility\n")}}
    }
    
    # output if an effective treatment is found
    crossed <- which(Z > e_boundaries$upper.bounds[j])
    if(length(crossed) > 0){
      best <- crossed[which.max(Z[crossed])] # index of the highest Z statistic
      
      end_stage <- j
      effective_trt <- active_id[best - 1]
      
      if(silent == FALSE){
        cat("\nTrial stopped early at stage", j, ". Recommended treatment:", effective_trt, "\n")
        cat("\n")}
      
      return(list(stopped_stage = end_stage,
                    effective_treatment = effective_trt,
                    boundaries = e_boundaries$upper.bounds[j],
                    Z_values = round(Z,2)))
      }
    
    # update before next stage
    active_id <- active_id[keep]
    K <- length(active_id)
    
    
    # output if all treatment arms are dropped
    if(length(active_id) == 0){
      if(silent == FALSE){
        cat("\nNo treatments effective. End trial early at stage", j)
        cat("\n")}
      
      end_stage <- j
      
      return(list(stopped_stage = j,
                  effective_treatment = NA,
                  Z_values = round(Z,2)))
    }
    
  
    if(silent==FALSE){cat("\n")}
    
    
  }
  
  best <- which.max(Z)
  recommended_trt <- active_id[best]
  
  if(silent==FALSE){
    cat("\nTrial ended at final stage", J, ". Recommended treatment:", recommended_trt)
  }
  
  return(list(stopped_stage = J, 
              effective_treatment = recommended_trt,
              boundaries = e_boundaries$upper.bounds[J],
              Z_values = round(Z,2)))
  
  
}
```

```{r}
ldBounds(t = cumsum(n)/sum(n), alpha = 0.05/4 , sides = 1, iuse = 1)
```

```{r}
mu <- c(0, 0.15, 0.28, 0.28, 0.09)
n <- c(67, 155, 38, 90)

mams_simulator(mu = mu, sd = 0.3, n = n, silent = FALSE)
```

###  Replication function

```{r}
mams_replicates <- function(mu, sd, n, nrep = 1000){
  resultsmat <- matrix(data = NA, nrow = nrep, ncol = 2)
  
  for(i in 1:nrep){
    rep <- mams_simulator(mu = mu, sd = sd, n = n, silent = TRUE)
    
    resultsmat[i, ] <- c(rep$stopped_stage, rep$effective_treatment)
  }
  colnames(resultsmat) <- c("stopped_stage", "effective_treatment")
    
  return(as.data.frame(resultsmat))
}
```

```{r}
mu <- c(0, 0.18, 0.20, 0.18, 0.19)
n <- c(66, 38, 46)

mams_replicates(mu = mu, sd = 0.5, n = n, nrep = 100)

```

## Probability of an early stop

```{r}
mu <- c(0, 0.18, 0.20, 0.18, 0.19)

Jgrid <- list(rep(60,2), rep(40,3), rep(30, 4), rep(24,5), rep(20, 6))
prob_early <- numeric(length = length(Jgrid))
stopped_stage <- numeric()

for(j in 1:length(Jgrid)){
  n <- Jgrid[[j]]
  
  sims <- mams_replicates(mu = mu, sd = 0.5, n = n, nrep = 100)
  
  prob_early[j] <- nrow(sims[sims$stopped_stage < length(n),])/nrow(sims)
  
  stopped_stage <- c(stopped_stage, sims$stopped_stage)
}


plot(seq(2,length(Jgrid)+1,1), prob_early, type = 'l', pch = '1', xlab = "Number of stages", ylab = "Probability of early stopping", main = "Probability of early stopping vs number of interims")

hist(stopped_stage, breaks = 6)

```

### Type I error rate

Probability of rejecting any null hypothesis when the global null is true

```{r}
n_interims <- rep(24,5)
type1 <- numeric(length = length(n_interims))
stopped_stage <- numeric()

for(j in 1:length(n_interims)){
  n <- n_interims[[j]]
  
  sims <- mams_replicates(mu = c(0, 0, 0, 0, 0), sd = 1, n = n, nrep = 100)
  
  type1[j] <- mean(!is.na(res$effective_treatment)) # prob of not! having an NA effective treatment
  
  stopped_stage <- c(stopped_stage, sims$stopped_stage)
}


plot(seq(2,length(n_interims)+1,1), type1, type = 'l', pch = '1', xlab = "Number of stages", ylab = "Type I error rate", main = "Type I error rate vs number of interims for a fixed sample size")
```

```{r}
n_list <- list(
  small = c(20, 20),       # total N = 40
  medium = c(20, 20, 20),  # total N = 60
  large = c(20, 20, 20, 20), # total N = 80
  xl = c(20, 20, 20, 20, 20) # total N = 100
)
type1 <- numeric(length(n_list))
total_N <- numeric(length(n_list))

for(j in seq_along(n_list)){
  n <- n_list[[j]]
  
  sims <- mams_replicates(mu = c(0, 0, 0, 0, 0), sd = 1, n = n, nrep = 5000)
  
  type1[j] <- mean(!is.na(sims$effective_treatment))
  total_N[j] <- sum(n)
}

plot(total_N, type1, type = 'b', pch = 19,
     xlab = "Total sample size", ylab = "Type I error rate",
     main = "Type I error vs accumulated sample size")
abline(h = 0.05, col = "red", lty = 2)  # nominal alpha line

```
