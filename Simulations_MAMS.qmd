---
title: "Simulations_MAMS"
format: html
editor: visual
---

# Multi-Arm Multi-Stage Trial Simulation

```{r}
library(ldbounds)
```

## Two-stage multi-arm trial simulator function

```{r}
twostage_simulator <- function(mu, sd, n){
  # mu: vector of means for each group including control
  # sd: common standard deviation
  # n: vector of sample sizes across stages 
  
  # number of hypothesis tests at first interim:
  n_tests <- length(mu) - 1
  
  y <- list()
  Z <- numeric(length = n_tests)

  ## STAGE 1 ##
  for (i in 1:length(mu)) {
    y[[i]] <- rnorm(n = n[1], mean = mu[i], sd = sd)
  }

  for(i in 1:n_tests){ 
    Z[i] <- (mean(y[[i+1]]) - mean(y[[1]])) / sqrt(2 * sd^2 / n[1])
  }
  
  ## Interim 1: check against efficacy and futility boundaries
  alpha_bonf <- 0.05 / n_tests # bonferroni adjustment for number of tests at each analysis
  boundaries <- ldBounds(t = c(0.634, 1), alpha = alpha_bonf, sides = 1, iuse = 1)
  
  cat("Stage 1. Number of treatments:", n_tests,"\n")
  
  for(i in 1:n_tests){
    if (Z[i] > boundaries$upper.bounds[1]){
      cat("Treatment", i, ": Reject H0. Past efficacy boundary \n")
      }
    else{
      cat("Treatment", i, ": Do not reject H0 \n")
      y <- y[-i] # remove the sample for treatment i from the data vector
      }
  }
  
  cat("\n")
  ### STAGE 2 ###
  n_tests = length(y) - 1
  cat("Stage 2. Number of treatments:", n_tests,"\n")
  
  for (i in 1:length(y)) {
    y[[i]] <- c(y[[i]], rnorm(n = n[2], mean = mu[i], sd = sd))
  }
  
  for(i in 1:n_tests){ 
    Z[i] <- (mean(y[[i+1]]) - mean(y[[1]])) / sqrt(2 * sd^2 / (n[1])+n[2])
  }
  
  for(i in 1:n_tests){
    if (Z[i] > boundaries$upper.bounds[2]){
      cat("Treatment", i, ": Reject H0. Past efficacy boundary \n")
      }
    else{
      cat("Treatment", i, ": Do not reject H0 \n")
      }
  }  
}
```

```{r}
mu <- c(0, 0.2, 0.05)
n <- c(66,38)

mams_simulator(mu = mu, sd = 0.3, n = n)
```

## General MAMS trial simulator function

```{r}
mams_simulator <- function(mu, sd, n){
  # mu: vector of means for each group including control
  # sd: common standard deviation
  # n: vector of sample sizes across stages 
  
  J <- length(n) # number of stages
  K <- length(mu) - 1 # number of treatment arms i.e. number of hypothesis tests
  
  control_id <- 1
  active_id <- 2:length(mu)
  
  # initialise list to store data vectors
  y <- vector("list", length = length(mu))  
  
  
  # calculate efficacy boundary - alpha adjusted for both multiple testing and multiple interims
  alpha_bonf <- 0.05 / K #Bonferroni adjustment for number of tests at each analysis
  boundaries <- ldBounds(t = cumsum(n)/sum(n), alpha = alpha_bonf, sides = 1, iuse = 1)
  
  # loop over stages 
  for(j in 1:J){
    cat("Stage", j, ". Number of treatments:", length(active_id),"\n")
    
    ## simulate samples for stage j and add on to existing samples
    y[[control_id]] <- c(y[[control_id]], rnorm(n=n[j], mean = mu[control_id], sd = sd)) # control arm
    for (i in active_id) { # treatment arms 
      y[[i]] <- c(y[[i]], rnorm(n = n[j], mean = mu[i], sd = sd)) 
    }
    
    # compute Z statistics for each treatment with control and against efficacy boundary
    Z <- numeric(length(active_id))
    keep <- logical(length = length(active_id)) 
    
    for(k in seq_along(active_id)){ 
      i <- active_id[k]
      
      Z[k] <- (mean(y[[i]]) - mean(y[[control_id]])) / sqrt(2 * sd^2 / sum(n[1:j]))
      
      if(Z[k] > boundaries$upper.bounds[j]){ # boundary for stage j
        cat("Treatment", i-1, ": Reject H0. Past efficacy boundary \n")
        keep[k] <- TRUE
      }
      else{
        cat("Treatment", i-1, ": Do not reject H0\n")
      }
    }
    
    # update before next stage
    active_id <- active_id[keep]
    K <- length(active_id)
    
    # output if all treatment arms are dropped
    if(length(active_id) == 0){
      cat("No treatments effective. End trial early at stage", j)
    }
  
    cat("\n")
    
    
  }
}
```

```{r}
mu <- c(0, 0.15, 0.28, 0.32, 0.09)
n <- c(67, 155, 38, 90)

mams_simulator(mu = mu, sd = 0.3, n = n)
```

```{r}
mams_sim_silent <- function(mu, sd, n){
  # mu: vector of means for each group including control
  # sd: common standard deviation
  # n: vector of sample sizes across stages 
  
  J <- length(n) # number of stages
  K <- length(mu) - 1 # number of treatment arms i.e. number of hypothesis tests
  
  control_id <- 1
  active_id <- 2:length(mu)
  
  # initialise list to store data vectors
  y <- vector("list", length = length(mu))  
  
  
  # calculate efficacy boundary - alpha adjusted for both multiple testing and multiple interims
  alpha_bonf <- 0.05 / K #Bonferroni adjustment for number of tests at each analysis
  boundaries <- ldBounds(t = cumsum(n)/sum(n), alpha = alpha_bonf, sides = 1, iuse = 1)
  
  # loop over stages 
  for(j in 1:J){
    #cat("Stage", j, ". Number of treatments:", length(active_id),"\n")
    
    ## simulate samples for stage j and add on to existing samples
    y[[control_id]] <- c(y[[control_id]], rnorm(n=n[j], mean = mu[control_id], sd = sd)) # control arm
    for (i in active_id) { # treatment arms 
      y[[i]] <- c(y[[i]], rnorm(n = n[j], mean = mu[i], sd = sd)) 
    }
    
    # compute Z statistics for each treatment with control and against efficacy boundary
    Z <- numeric(length(active_id))
    keep <- logical(length = length(active_id)) 
    
    for(k in seq_along(active_id)){ 
      i <- active_id[k]
      
      Z[k] <- (mean(y[[i]]) - mean(y[[control_id]])) / sqrt(2 * sd^2 / sum(n[1:j]))
      
      if(Z[k] > boundaries$upper.bounds[j]){ # boundary for stage j
        #cat("Treatment", i-1, ": Reject H0. Past efficacy boundary \n")
        keep[k] <- TRUE
      }
      else{
        #cat("Treatment", i-1, ": Do not reject H0\n")
      }
    }
    
    # update before next stage
    active_id <- active_id[keep]
    K <- length(active_id)
    
    # output if all treatment arms are dropped
    if(length(active_id) == 0){
      #cat("No treatments effective. End trial early at stage", j)
    }
  
    #cat("\n")
    
    
  }
  return(length(active_id) > 0)
}
```

```{r}
power_sim_mams <- function(mu, sd, n, nrep = 10000){
  results <- replicate(nrep, mams_sim_silent(mu, sd, n))
  
  return(mean(results))
}
```

```{r}
mu <- c(0, 0.15, 0.28, 0.43, 0.09)
n <- c(67, 155, 38, 90)

power_sim_mams(mu = mu, sd = 0.3, n = n)
```
