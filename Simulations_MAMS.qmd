---
title: "Simulations_MAMS"
format: html
editor: visual
---

# Multi-Arm Multi-Stage Trial Simulation

```{r}
library(ldbounds)
```

## General MAMS trial simulator function

Define a MAMS trial simulator function that takes three arguments: `mu`, `sd`, and `n`.

`mu`: vector of means for each group, where the first element must correspond to the control group

`sd`: common standard deviation across groups

`n`: vector of per-arm sample sizes at each interim, i.e. $n_i$ is the sample size for all arms at interim $i$.

The Type-I error rate is adjusted for multiple hypotheses using a Bonferroni adjustment, as well as for repeated analyses using a ***Lan-DeMetz alpha-spending function*** with OBF efficacy boundaries.

At stage $j$, the per-arm sample size is increased by $n_j$. If a trial arm is dropped, then the overall sample size decreased by $n_j$; recruiting will stop for any dropped experimental arms

**Return objects:**

`stopped_stage`: stage that the trial was stopped at

`effective_treatment`: experimental treatment that is recommended as a result of the trial

`boundaries`: the boundary used at the final stage to compare Z values against

`Z`: Z values of the experimental treatments at the final analysis

**Quantities of interest:**

$PET(\delta)$**:** Probability of early termination of the trial

$\mathbb{E}(N|\delta)$**:** Expected sample size

```{r mams trial simulator}
mams_alphasp <- function(mu, sd, n, silent = TRUE){
  # mu: vector of means for each group including control
  # sd: common standard deviation
  # n: vector of sample sizes across stages 
  
  J <- length(n) # number of stages
  K <- length(mu) - 1 # number of treatment arms i.e. number of hypothesis tests
  
  # indices for control and active experimental treatments
  control_id <- 1
  active_id <- 2:length(mu)
  
  # initialise list to store data vectors
  y <- vector("list", length = length(mu))  
  
  
  # Calculate efficacy boundary: Lan-DeMetz alpha-spending function
  #  alpha Bonferroni-adjusted for both multiple testing and multiple interims
  alpha_bonf <- 0.05 / K 
  e_boundaries <- ldBounds(t = cumsum(n)/sum(n), alpha = alpha_bonf, sides = 1, iuse = 1)
  f_bound <- 0
  
  # loop over stages 
  for(j in 1:J){
    if(silent == FALSE){cat("Stage", j, ". Number of treatments:", length(active_id),"\n")}
    
    ## simulate samples for stage j and add on to existing samples
    y[[control_id]] <- c(y[[control_id]], rnorm(n=n[j], mean = mu[control_id], sd = sd)) # control arm
    for (i in active_id) { # treatment arms 
      y[[i]] <- c(y[[i]], rnorm(n = n[j], mean = mu[i], sd = sd)) 
    }
    
    # compute Z statistics for each treatment with control and against efficacy boundary
    Z <- numeric(length(active_id))
    keep <- logical(length = length(active_id))
    
    # compute Z statistics for all treatments 
    for(k in seq_along(active_id)){ 
      i <- active_id[k]
      
      Z[k] <- (mean(y[[i]]) - mean(y[[control_id]])) / sqrt(2 * sd^2 / sum(n[1:j]))
    }
    
    # check Z statistics against stopping boundaries
    for(k in seq_along(active_id)){ 
      i <- active_id[k]
      if(Z[k] > e_boundaries$upper.bounds[j]){
        if(silent == FALSE){
          cat("Treatment", i-1, ": Reject H0. Past efficacy boundary \n")}
      }
      if(Z[k] < e_boundaries$upper.bounds[j] & Z[k] >= f_bound){
        if(silent == FALSE){
          cat("Treatment", i-1, ": Do not reject H0. Within continuation boundaries\n")}
        keep[k] <- TRUE
      }
      if(Z[k] < f_bound){
        if(silent == FALSE){
          cat("Treatment", i-1, ": Reject H0. Drop treatment for futility\n")}}
    }
    
    # output if an effective treatment is found
    crossed <- which(Z > e_boundaries$upper.bounds[j])
    if(length(crossed) > 0){
      best <- crossed[which.max(Z[crossed])] # index of the highest Z statistic
      
      end_stage <- j
      effective_trt <- active_id[best - 1]
      
      if(silent == FALSE){
        cat("\nTrial stopped early at stage", j, ". Recommended treatment:", effective_trt, "\n")
        cat("\n")}
      
      return(list(stopped_stage = end_stage,
                    effective_treatment = effective_trt,
                    end_boundary = e_boundaries$upper.bounds[j],
                    efficacy_boundaries = e_boundaries$upper.bounds,
                    Z_values = round(Z,2)))
      }
    
    # update before next stage
    active_id <- active_id[keep]
    K <- length(active_id)
    
    
    # output if all treatment arms are dropped
    if(length(active_id) == 0){
      if(silent == FALSE){
        cat("\nNo treatments effective. End trial early at stage", j)
        cat("\n")}
      
      end_stage <- j
      
      return(list(stopped_stage = j,
                  effective_treatment = NA,
                  Z_values = round(Z,2)))
    }
    
  
    if(silent==FALSE){cat("\n")}
    
    
  } # end of loop over stages
  
  # Treatment recommendation 
  best <- which.max(Z)
  recommended_trt <- active_id[best - 1]
  
  if(silent==FALSE){
    cat("\nTrial ended at final stage", J, ". Recommended treatment:", recommended_trt)
  }
  
  return(list(stopped_stage = J, 
              effective_treatment = recommended_trt,
              end_boundary = e_boundaries$upper.bounds[J],
              efficacy_boundaries = e_boundaries$upper.bounds,
              Z_values = round(Z,2)))
  
  
}
```

#### Example of calculation of Lan-DeMetz boundaries:

```{n = c(30,30,30)}
ldBounds(t = cumsum(n)/sum(n), alpha = 0.05/3 , sides = 1, iuse = 1){r}

```

```{r}
bounds <- ldBounds(t = cumsum(n)/sum(n), alpha = 0.05/4 , sides = 1, iuse = 1)
bounds$upper.bounds
```

#### Example of a MAMS trial simulation

```{r}
mu <- c(0, 0.15, 0.28, 0.28, 0.09); n <- c(20,20,20)
#mu <- c(0,0,0,0,0) ; n <- c(30,30,30)
trial <- mams_alphasp(mu = mu, sd = 0.3, n = n, silent = FALSE)
trial$efficacy_boundaries

plot(x = seq_along(n), y = trial$efficacy_boundaries, type = 'b', xlab = 'Interim analysis',
     ylab = 'OBF Efficacy Boundary', 
     ylim = c(0,ceiling(max(trial$Z_values))), xaxt = 'n')
axis(side = 1, at = seq_along(n))
points(trial$stopped_stage, max(trial$Z_values), col = 'navy', pch = 8)
points(rep(trial$stopped_stage, length(trial$Z_values[-which.max(trial$Z_values)])), trial$Z_values[-which.max(trial$Z_values)], col = 'maroon', pch = 4)

x_poly <- c(seq_along(n), rev(seq_along(n)))
y_poly <- c(trial$efficacy_boundaries, rep(ceiling(max(trial$Z_values)), length(n)))

polygon(x_poly, y_poly, col = "#6BD7AF80", border = NA, density = 10, angle = 45)



```

## Replication function

The replication function replicates `mams_simulator` and returns the following:

`resultsdf` : data frame of the result of each trial replicate, with columns `stopped_stage` and `effective_treatment`

`ESS` : Expected sample size calculated from the set of replicates

```{r}
mams_replicates <- function(mu, sd, n, nrep = 1000){
  resultsmat <- matrix(data = NA, nrow = nrep, ncol = 2)
  
  for(i in 1:nrep){
    rep <- mams_alphasp(mu = mu, sd = sd, n = n, silent = TRUE)
    
    resultsmat[i, ] <- c(rep$stopped_stage, rep$effective_treatment)
  }
  colnames(resultsmat) <- c("stopped_stage", "effective_treatment")
  
  resultsdf <- as.data.frame(resultsmat)
  
  ### Expected sample size 
  p_earlystop <- numeric(length = length(n))

  for(i in 1:length(n)){
    # Probability of the trial stopping at stage i
    p_earlystop[i] <- nrow(resultsdf[resultsdf$stopped_stage == i, ])/nrep
  }

  ESS <- sum(cumsum(n)*p_earlystop)  
  
  return(list(PET = p_earlystop, ESS = ESS, results = resultsdf))
}
```

```{r}
mu <- c(0, 0.18, 0.20, 0.18, 0.19)
n <- c(66, 38, 46)

reps <- mams_replicates(mu = mu, sd = 0.5, n = n, nrep = 100)

reps$results
```

## Expected sample size

ESS depends on sample size per stage and probability of ending the trial early, which in turn is dependent on true effect size and stopping boundaries.

```{r}
Jgrid <- list(rep(60,2), rep(40,3), rep(30, 4), rep(24,5), rep(20, 6)) # Total N = 120
mu <- c(0,0.1,0.1,0)

x <- numeric(length(Jgrid))
y <- x

for(j in 1:length(Jgrid)){
  n <- Jgrid[[j]]
  
  sims <- mams_replicates(mu = mu, sd = 1, n = n)
  
  x[j] <- length(Jgrid[[j]])
  y[j] <- sims$ESS
}

plot(x, y, type = 'b', main = "Expected sample size against number of interims",
     xlab = "Number of interim analyses", ylab = "ESS")

```

### Probability of an early stop

```{r}
Jgrid <- list(rep(60,2), rep(40,3), rep(30, 4), rep(24,5), rep(20, 6)) # Total N = 120
mu <- c(0,0.1,0.1,0)

x <- numeric(length(Jgrid))
prob_early <- numeric(length = length(Jgrid))

for(j in 1:length(Jgrid)){
  n <- Jgrid[[j]]
  
  sims <- mams_replicates(mu = mu, sd = 0.5, n = n, nrep = 100)
  
  x[j] <- length(Jgrid[[j]])
  prob_early[j] <- nrow(sims$results[sims$results$stopped_stage < length(n),])/nrow(sims$results)
}

plot(x, prob_early, type = 'b', xlab = "Number of interim analyses", ylab = "PET", main = "Probability of early stopping vs number of interims")
```

### Type I error rate

Probability of rejecting any null hypothesis when the global null is true

```{r}
Jgrid <- list(rep(60,2), rep(40,3), rep(30, 4), rep(24,5), rep(20, 6)) # Total N = 120
type1 <- numeric(length = length(Jgrid))

for(j in 1:length(Jgrid)){
  n <- Jgrid[[j]]
  
  sims <- mams_replicates(mu = c(0, 0, 0, 0, 0), sd = 0.1, n = n, nrep = 100)
  
  x[j] <- length(Jgrid[[j]])
  # prob of not! having an NA effective treatment
  type1[j] <- mean(!is.na(sims$results$effective_treatment)) 
}


plot(x, type1, type = 'b', xlab = "Number of interim analyses", ylab = "Type I error rate", main = "Type I error rate vs number of interims")

```

```{r}
n_list <- list(
  small = c(20, 20),       # total N = 40
  medium = c(20, 20, 20),  # total N = 60
  large = c(20, 20, 20, 20), # total N = 80
  xl = c(20, 20, 20, 20, 20) # total N = 100
)
type1 <- numeric(length(n_list))
total_N <- numeric(length(n_list))

for(j in seq_along(n_list)){
  n <- n_list[[j]]
  
  sims <- mams_replicates(mu = c(0, 0, 0, 0, 0), sd = 0.3, n = n, nrep = 1000)
  
  type1[j] <- mean(!is.na(sims$results$effective_treatment))
  total_N[j] <- sum(n)
}

plot(total_N, type1, type = 'b', pch = 19,
     xlab = "Total sample size", ylab = "Type I error rate",
     main = "Type I error vs accumulated sample size")
abline(h = 0.05, col = "red", lty = 2)  # nominal alpha line

```

### Power

```{r}
effects <- c(0.2,0.3,0.4,0.5)
n <- c(30,30,30)
power_est <- numeric(length = length(effects))

for(i in 1:length(effects)){
  mu = c(0,effects[i],0.1,0.1) # only treatment 1 is effective
  
  res <- mams_replicates(mu = mu, sd = 1, n = n, nrep = 1000)
  
  power_est[i] <- nrow(res$results[res$results$effective_treatment == 2,])/1000
}

power_est

plot(effects, power_est, type = 'l', main = "Power estimates when only one treatment is effective",  xlab = "True effect size of treatment 1")

```

# New simulation and replication function

This version of the MAMS trial simulator function does not use an alpha-spending function to calculate stopping boundaries as before, but instead takes as arguments vectors for lower and upper stopping bounds (i.e. pre-specified)

`l` : vector of lower stopping bounds

`u` : vector of upper stopping bounds

`sd` : common group standard deviation

`n` : sample size added per stage for experimental arms

`Mu` : matrix of group means; stack of group mean vectors for different Type I/II scenarios

`r` : allocation ratio, $r = \frac{n_0}{n_1}$ , $n_1 =$ `n`

```{r}
mams_ef <- function(l, u, sd = 1, n, mu, r = 1, silent = TRUE){
  J <- length(n) # number of stages
  K <- length(mu) - 1 # number of treatment arms i.e. number of hypothesis tests
  
  # indices for control and active experimental treatments
  control_id <- 1
  active_id <- 2:length(mu)
  
  # initialise list to store data vectors
  y <- vector("list", length = length(mu))

  # initiliase a running total of overall sample size
  total_N <- 0
  
#--------- loop over stages 
  for(j in 1:J){
    if(silent == FALSE){cat("Stage", j, ". Number of treatments:", length(active_id),"\n")}
    
    y[[control_id]] <- c(y[[control_id]], rnorm(n=r*n[j], mean = mu[control_id], sd = sd))
    
    for (i in active_id) { # treatment arms 
      y[[i]] <- c(y[[i]], rnorm(n = n[j], mean = mu[i], sd = sd)) 
    }
    
    # compute Z statistics for each treatment with control and against efficacy boundary
    Z <- numeric(length(active_id))
    keep <- logical(length = length(active_id))
    
    # compute Z statistics for all treatments 
    for(k in seq_along(active_id)){ 
      i <- active_id[k]
      
      nT <- sum(n[1:j]) # treatment arm current stage sample size 
      nC <- r * nT # control arm current stage sample size 
      Z[k] <- (mean(y[[i]]) - mean(y[[control_id]])) / sqrt(sd^2 * (1/nT + 1/nC))
    }
    
    # get stopping boundaries for the current stage
    e <- u[j]
    f <- l[j]
    
    # check Z statistics against stopping boundaries
    for(k in seq_along(active_id)){ 
      ##i <- active_id[k]
      
      if(Z[k] > e){ if( silent == FALSE){cat("Treatment", k, "crossed efficacy bound\n")}}
      
      if(Z[k] < e & Z[k] >= f){
        keep[k] <- TRUE
        if(silent == FALSE){cat("Treament", k, "within continuation boundaries\n")}
      }
      
      if(Z[k] < f){if(silent == FALSE){cat("Treatment", k, "crossed futility bound\n")}}
    }
    
    # output if an effective treatment is found
    crossed <- which(Z > e)
    if(length(crossed) > 0){
      best <- crossed[which.max(Z[crossed])] 
      
      end_stage <- j
      effective_trt <- seq_along(active_id)[best]
      
      total_N <- total_N + n[j]*K + n[j]*r
      
      return(list(stopped_stage = end_stage,
                    effective_treatment = effective_trt,
                    end_boundary = e,
                    active_treatments = active_id-1,
                    Z_values = round(Z,2), 
                    total_N = total_N))
      }
    
    # if no effective treatment is found: update and continue to next stage
    total_N <- total_N + n[j]*K  + n[j]*r # sample that was just used 
    active_id <- active_id[keep]
    K <- length(active_id)
    
    # output if all treatment arms are dropped
    if(length(active_id) == 0){
      
      end_stage <- j
      
      return(list(stopped_stage = j,
                  effective_treatment = NA,
                  Z_values = round(Z,2), 
                  total_N = total_N))
    }
    
    
  } 
#--------- end of loop over stages
  
  # Treatment recommendation 
  best <- which.max(Z)
  recommended_trt <- seq_along(active_id)[best]
  
  return(list(stopped_stage = J, 
              effective_treatment = recommended_trt,
              end_boundary = u[J],
              active_treatments = active_id-1,
              Z_values = round(Z,2), 
              total_N = total_N))

}
```

### Triangular boundaries

```{r}
n = rep(24,4)


J <- length(n) # number of stages
K <- length(mu) - 1 # number of treatment arms i.e. number of hypothesis tests

B <- numeric(length = J)
  
  # indices for control and active experimental treatments
  control_id <- 1
  active_id <- 2:length(mu)
  
  # initialise list to store data vectors
  y <- vector("list", length = length(mu))

  # initiliase a running total of overall sample size
  total_N <- 0
  
#--------- loop over stages 
  for(j in 1:J){
    #if(silent == FALSE){cat("Stage", j, ". Number of treatments:", length(active_id),"\n")}
    
    y[[control_id]] <- c(y[[control_id]], rnorm(n=r*n[j], mean = mu[control_id], sd = sd))
    
    for (i in active_id) { # treatment arms 
      y[[i]] <- c(y[[i]], rnorm(n = n[j], mean = mu[i], sd = sd)) 
    }
    
    # compute Z statistics for each treatment with control and against efficacy boundary
    Z <- numeric(length(active_id))
    keep <- logical(length = length(active_id))
    
    # compute Z statistics for all treatments 
    for(k in seq_along(active_id)){ 
      i <- active_id[k]
      
      nT <- sum(n[1:j]) # treatment arm current stage sample size 
      nC <- r * nT # control arm current stage sample size 
      Z[k] <- (mean(y[[i]]) - mean(y[[control_id]])) / sqrt(sd^2 * (1/nT + 1/nC))
    }
  
  B[j] <- 
  }
```

## Replication function & Type I error rate

The replication function takes the same arguments as the simulation function `mams_ef` plus an additional argument, `nrep = 1000`. The function produces `nrep` replicates of the trial specified by the other arguments and returns the following values:

`early_stop_prob`: distribution of the probabilities of the trial ending early at each stage

`ESS_arm`: expected sample size for a single trial arm

`ESS_trial`: expected sample size for the whole trial (i.e. for all arms)

```{r}
mams_replicates2 <- function(l, u, mu, sd = 1, r = 1, n, nrep = 1000){
  resultsmat <- matrix(data = NA, nrow = nrep, ncol = 3)
  
  for(i in 1:nrep){
    rep <- mams_ef(l = l, u = u, sd = sd, n = n, mu = mu, r = r)
    
    resultsmat[i, ] <- c(rep$stopped_stage, rep$effective_treatment, rep$total_N)
  }
  colnames(resultsmat) <- c("stopped_stage", "effective_treatment", "total_N")
  
  resultsdf <- as.data.frame(resultsmat)
  
  ### Expected sample size 
  p_earlystop <- numeric(length = length(n))

  for(i in 1:length(n)){
    # Probability of the trial stopping at stage i
    p_earlystop[i] <- nrow(resultsdf[resultsdf$stopped_stage == i, ])/nrep
  }
  
  # calculate ESS using distribution of p_earlystop
  ESS_arm <- sum(cumsum(n)*p_earlystop) 
  ESS_trial <- ESS_arm * length(mu)
  
  # calculate ESS using total_N from sim function mams_ef
  ESS_trial2 <- round(mean(resultsdf$total_N), 1)
  
  if(all(mu == 0)){
    TypeI <- mean(!is.na(resultsdf$effective_treatment))}
  else{
    TypeI <- NA
  }
  
  return(list(early_stop_prob = p_earlystop, ESS_per_arm = ESS_arm, ESS_trial = ESS_trial, ESS_trial2 = ESS_trial2, TypeIrate = TypeI, results = resultsdf
              ))
}
```

## Power

Power calculator function that takes as its arguments:

• result - the result data frame returned after running mams_replicates

• mu - the true treatment effect vector passed to mams_replicates

• delta_1 - the minimum threshold for the clinically relevant treatment difference

```{r}
power <- function(result, mu, delta_1, type = "any"){
  #any-pair power: probability of any effective treatment being recommended
  
  # indices of treatments with a relevant treatment effect
  if(type == "any"){
    correct <- which(mu >= delta_1)-1
  }
  if(type == "LFC"){
    correct <- which.max(mu) - 1 #### revise this ?
    
    #max_mu <- max(mu)
    #correct <- which(mu == max_mu) - 1 # this isnt really the LFC
  }
  power_a <- mean(!is.na(result$effective_treatment) & 
         result$effective_treatment %in% correct)
  
  return(power_a)
}
```

```{r}
LFC <- c(0, 0.545,0.178,0.178, 0.178)
results <- mams_replicates2(l = c(0, 0, 2.182), u = c(3.779, 2.672, 2.182), n = rep(30,3), mu = LFC)$results

power_any(results, mu = LFC, delta_1 = 0.5)
```

## Scenario function

`mams_hyp` produces the same return objects for different scenarios of the null hypothesis. The function takes the same arguments as `mams_replicates2`, but instead of the mean vector `mu`, a matrix `Mu` whose columns consist of mean vectors for different null hypothesis scenarios must be passed.

```{r}
alpha_bonf = 0.05/5
n = rep(42,2)
e_boundaries <- ldBounds(t = cumsum(n)/sum(n), alpha = alpha_bonf, sides = 2, iuse = 1)
e_boundaries$upper.bounds
```

```{r}
mams_hyp <- function(bounds = 'obf_one', l, u, n, r = 1, sd = 1, Mu, delta_1, nrep = 1000){
  
  ESS <- matrix(NA, nrow = 1, ncol = ncol(Mu), dimnames = dimnames(Mu))
  PES <- list()
  interval <- list()
  TypeI <- NA
  anypair_power <- matrix(NA, nrow = 1, ncol = ncol(Mu), dimnames = dimnames(Mu))
  lfc_power <- matrix(NA, nrow = 1, ncol = ncol(Mu), dimnames = dimnames(Mu))
  
  # compute stopping boundries if none have been inputted by user
  if(missing(l) && missing(u)){
    alpha_bonf <- 0.05 / nrow(Mu)
    if(bounds == 'obf_one'){ #one-sided 
    u <- ldBounds(t = cumsum(n)/sum(n), alpha = alpha_bonf, sides = 1, iuse = 1)$upper.bounds
    l <- rep(0, length(u))
    l[length(l)] <- u[length(u)] # make the last boundary the same for both l and u
    }
    if(bounds == 'obf'){
    u <- ldBounds(t = cumsum(n)/sum(n), alpha = alpha_bonf, sides = 2, iuse = 1)$upper.bounds
    l <- ldBounds(t = cumsum(n)/sum(n), alpha = alpha_bonf, sides = 2, iuse = 1)$lower.bounds
    l[length(l)] <- u[length(u)]
    }
    if(bounds == 'pocock'){
    u <- ldBounds(t = cumsum(n)/sum(n), alpha = alpha_bonf, sides = 1, iuse = 2)$upper.bounds
    l <- rep(0, length(u))
    l[length(l)] <- u[length(u)]
    }
  }

  
  
  for(h in 1:ncol(Mu)){
    mu <- Mu[,h]
    
    reps <- mams_replicates2(l = l, u = u, n = n, r = r, sd = sd, mu = mu, nrep = nrep)
    
    #
    PES[[h]] <- reps$early_stop_prob
    
    #ESS
    ESS[h] <- reps$ESS_trial2
    
    #CI
    boot_means <- replicate(1000, mean(sample(reps$results$total_N, replace = TRUE)))
    quantiles <- quantile(boot_means, probs = c(0.025, 0.975))
    interval[[h]] <- quantiles
    
    #Type I
    if(all(mu == 0)){
      TypeI <- reps$TypeIrate
    }
    
    #Power
    if(missing(delta_1)){
      anypair_power[h] <- NA
      lfc_power[h] <- NA
    }
    else{
      anypair_power[h] <- power(reps$results, mu = mu, delta_1 = delta_1, type = 'any')
      lfc_power[h] <- power(reps$results, mu = mu, delta_1 = delta_1, type = 'LFC')
    }
    
  }
  
  #maxN <- n[1]*length(n)*nrow(Mu)
  maxN <- sum(n)*((nrow(Mu)-1) + r) # sum(n)*nrow(Mu)
  ESS <- cbind(maxN, ESS)
  dimnames(ESS)[[2]][1] <- 'MaxN'
  
  return(list(ESS = ESS,
              P_early_stop = PES,
              #CI = interval, 
              TypeI = TypeI, 
              anypair_power = anypair_power,
              LFC_power = lfc_power
              , bounds = list(l, u)))
}
```

```{r}
LFC <- c(0, 0.545,0.178,0.178, 0.178)
HG <- c(rep(0,5))
Mu <- cbind(HG, LFC)


#mams_hyp(l = c(0, 2.169), u = c(3.068, 2.169), n = rep(42,2), delta_1 = 0.1, Mu = Mu)
mams_hyp(bounds = 'obf', n = rep(42,2), delta_1 = 0.545, Mu = Mu )
```

### Boundary plotter function

```{r}
boundary_plotter <- function(l, u){
  x = seq(1, length(u))
  ymax = ceiling(max(u))
  ymin = floor(min(l))
  
  plot(x = x, y = u, type = 'b', ylim = c(ymin, ymax), xaxt = 'n',
       xlab = "Interim analysis", ylab = "Z-statistic", main = "Stopping bounds")
  axis(side = 1, at = x)
  lines(x = x, y = l, type = 'b')
  
  x_eff <- c(x, rev(x))
  y_eff <- c(u, rep(ymax, length(x)))
  
  x_fut <- x_eff
  y_fut <- c(rep(ymin, length(x)), rev(l))
  
  polygon(x_eff, y_eff, col = "#6BD7AF80", border = NA, density = 10, angle = 45)
  polygon(x_fut, y_fut, col = "salmon", border = NA, density = 10, angle = 45)
}

boundary_plotter(l = c(0, 0, 2.182), u = c(3.779, 2.672, 2.182))
#boundary_plotter(u = c(4.375, 3.094, 2.526, 2.188), l = c(0, 0, 0, 2.1875))
```

# Reproducing results from Wason & Jaki (2011) - TAILoR trial

Using the simulation and replication functions above, ESS are estimated for the following scenarios:

$H_G$ : The global null hypothesis: all treatment effects are zero ($\delta^{(1)} = ... = \delta^{(K)} =0$

$LFC$ : The Least Favourable Configuration: $\delta^{(1)} = \delta_1, ~~ \delta^{(2)}... = \delta^{(K)} = \delta_0$, where $\delta_1$ is the clinically relevant difference that is intended to be detected in the trial and $\delta_0$ is the minimum clinically interesting difference .

`MaxN` gives the maximum sample size assuming that none of the trial arms are dropped, and the trial continues until the planned final stage.

```{r}
LFC <- c(0, 0.545,0.178,0.178, 0.178)
HG <- c(rep(0,5))
Mu <- cbind(HG, LFC)

twostage <- mams_hyp(l = c(0, 2.169), u = c(3.068, 2.169), n = rep(42,2), Mu = Mu)

threestage <- mams_hyp(l = c(0, 0, 2.182), u = c(3.779, 2.672, 2.182), n = rep(30,3), Mu = Mu)

fourstage <- mams_hyp(l = c(0, 0, 0, 2.1875), u = c(4.375, 3.094, 2.526, 2.188), n = rep(24,4), Mu = Mu)

results <- rbind(twostage$ESS, threestage$ESS, fourstage$ESS)
rownames(results) <- c("2stage", "3stage", "4stage")

type1rates <- c(twostage$TypeI, threestage$TypeI, fourstage$TypeI)

results

boundary_plotter(l = threestage$bounds[[1]], u = threestage$bounds[[2]])
```

Run the same design characteristics through but with OBF-style Lan-DeMetz bounds produces by my function:

```{r}
LFC <- c(0, 0.545,0.178,0.178, 0.178)
HG <- c(rep(0,5))
Mu <- cbind(HG, LFC)

twostage <- mams_hyp(bounds = 'obf_one', n = rep(42,2), Mu = Mu)

threestage <- mams_hyp(bounds = 'obf_one', n = rep(30,3), Mu = Mu)

fourstage <- mams_hyp(bounds = 'obf_one', n = rep(24,4), Mu = Mu)

results <- rbind(twostage$ESS, threestage$ESS, fourstage$ESS)
rownames(results) <- c("2stage", "3stage", "4stage")

type1rates <- c(twostage$TypeI, threestage$TypeI, fourstage$TypeI)

results

boundary_plotter(l = threestage$bounds[[1]], u = threestage$bounds[[2]])
```

```{r}
colours <- c("darkred", "darkgreen", "navy")

plot(1:ncol(results), results[1,], type = "o", col = colours[1], pch = 16,
     xaxt = "n", ylim = range(results),
     xlab = "Scenario", ylab = "Expected Sample Size (ESS)",
     main = "ESS Across Different Scenarios (OBF Boundaries)")
for (i in 2:nrow(results)) {
  lines(1:ncol(results), results[i,], type = "o", col = colours[i], pch = 16)
}
axis(side = 1, at = 1:ncol(results), labels = colnames(results))

legend("topright", legend = c("Two-stage", "Three-stage", "Four-stage"), title = "Number of stages", col = colours, pch = 16)
```

```{r}
colours <- c("darkred", "darkgreen", "navy")

plot(1:nrow(results), results[,1], type = "o", col = colours[1], pch = 16,
     xaxt = "n", ylim = range(results),
     xlab = "Number of stages", ylab = "Expected Sample Size (ESS)",
     main = "ESS for different numbers of stages and scenarios (OBF)")
for (i in 2:ncol(results)) {
  lines(1:nrow(results), results[,i], type = "o", col = colours[i], pch = 16)
}
axis(side = 1, at = 1:ncol(results), labels = c("Two", "Three", "Four"))

legend(x = 2.75, y = 460, legend = c("MaxN", "HG", "LFC"), title = "Scenario", col = colours, pch = 16)

```

```{r}
plot(1:3, type1rates, type = 'p', pch = 16, main = 'Type I error rate for different numbers of stages (OBF Boundaries)',
     xaxt = 'n', xlab = "Number of stages", ylab = "Type I Error rate", 
     col = colours)
axis(side = 1, at = 1:3, labels = c("Two", "Three", "Four"))
abline(h = 0.05, lty = 2)
```

# Application to ROSSINI-2 trial

• 4 stages (including internal pilot) - 2 interim + 1 final analysis (3 stages excluding pilot)

• SSI of the control group is assumed to be 15%

Actual trial places restrictions on how many arms can progress after each interim (pre-specified MAMS design) - for the purposes of this project this restriction will be lifted and the trial will be considered a full MAMS design

### Find $\delta_0$ for ROSSINI-2

```{r}
n <- c(201, 226, 517)
b <- ldBounds(t = cumsum(n)/sum(n), alpha = 0.05/7 , sides = 1, iuse = 2)
boundary_plotter(l = c(0, 0, b$upper.bounds[3]), u= b$upper.bounds)
```

```{r}
effects <- seq(0, 0.05, 0.005)  #seq(0, 0.1, 0.01) 
n <- c(201, 226, 517)
power_est <- numeric(length = length(effects))

l <- c(0, 0, 5.7131)
u <- c(2.4511, 3.8330, 5.7131)

boundary_plotter(l, u)

for(i in 1:length(effects)){
  mu = c(0, 0.05, rep(effects[i],6)) # treatment 1 has target diff, others have delta_0
  
  res <- mams_replicates2(l = l, u = u, mu = mu, sd = 0.3, n = n, nrep = 1000)
  
  power_est[i] <- mean(res$results$effective_treatment == 1, na.rm = TRUE)
}

plot(effects, power_est, type = 'l', main = "LFC Power for delta1 = 0.05 against delta0 candidates",  xlab = "delta0 candidates", ylab = "LFC Power")
abline(h = 0.5, lty = 2, col = 'gray')
abline(v = 0.029, lty = 2, col = 'gray')
```

```{r}
#n <- c(402,452,1033)
#n = c(261, 253, 220)
n = c(201, 226, 517)
r <- 2
c
mu = matrix(data = c(0, 0.05, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03), ncol = 1)

mams_hyp(l = l, u = u, Mu = mu, n = n, sd = 0.3, r = r, delta_1 = 0.05)
```

```{r}
LFC <- c(0, 0.05, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03)
HG <- c(rep(0,8))
multiple <- c(0, 0.05, 0.04, 0.04, 0, 0, 0, 0)
Mu <- cbind(HG, LFC, multiple)
#n <- c(402,452,1033)
#n = c(261, 253, 220)
n = c(201, 226, 517)

pocock <- mams_hyp(bounds = 'pocock', r = 2, sd = 0.33, n = n, delta_1 = 0.05, Mu = Mu)

obf_1 <- mams_hyp(bounds = 'obf_one', r = 2, sd = 0.33, n = n, delta_1 = 0.05, Mu = Mu)

obf_2 <- mams_hyp(bounds = 'obf', r = 2, sd = 0.33, n = n, delta_1 = 0.05, Mu = Mu)

ESS <- rbind(pocock$ESS, obf_1$ESS, obf_2$ESS)
rownames(ESS) <- c("one-sided", "two-sided")
ESS


#boundary_plotter(results$bounds[[1]], results$bounds[[2]])
```

### Sensitivity analysis

H

## \*Grid search over trial parameters

```{r}
Jgrid <- list(rep(60,2), rep(40,3), rep(30, 4)) # Total N = 120

r_grid <- c(1, 1.5, 2)


results <- list()
counter <- 1

l_stages = list(c(0, 2.169), c(0, 0, 2.182), c(0, 0, 0, 2.1875))
u_stages = list(c(3.068, 2.169), c(3.779, 2.672, 2.182), c(4.375, 3.094, 2.526, 2.188))

mu <- c(0, 0.545, 0.178, 0.178, 0.178)  # LFC
sd <- 1
nrep <- 1000

for (i in seq_along(Jgrid)) {
  n <- Jgrid[[i]]
  l <- l_stages[[i]]
  u <- u_stages[[i]]
  
  for (r in r_grid) {

    sim <- mams_replicates2(l = l, u = u, mu = mu, sd = sd, n = n, r = r, nrep = nrep)

    results[[counter]] <- list(
      stages = length(n),
      r = r,
      ESS = sim$ESS_trial,
      TypeI = sim$TypeIrate
    )
    counter <- counter + 1
  }
}

results_df <- do.call(rbind, lapply(results, as.data.frame))
```

```{r}
library(scatterplot3d)

x <- results_df$stages
y <- results_df$r
z <- results_df$ESS

plot <- scatterplot3d(x,y,z,
              xlab = "Stages",
              ylab = "Allocation ratio",
              zlab = "ESS",
              pch = 16, color = "blue", cex.symbols = 2,
              main = "3D Scatterplot of ESS", 
              angle = 60)

```
