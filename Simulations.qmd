---
title: "Simple simulations"
format: html
editor: visual
---

## Two-arm trial simulation

Write a simulation of a basic two arm clinical trial, where the participant outcomes are all normally distributed with the same variance but with a different mean in each of the two arms. Then use this simulation to estimate the power of this clinical trial.

Get the treatment effect $\hat{\delta} = \overline{y}_1 - \overline{y}_0$, then the Z-test statistic $Z = \frac{\hat{\delta} - \delta}{\sqrt{2\sigma^2/n}} = \frac{\hat{\delta} - \delta}{se(\hat{\delta})}$ where $Z \sim N(0,1)$

### Data simulation function

Make a function for data simulation:

```{r}
data_sim <- function(mu0, mu1, sd, n){
  # mu0, mu1: sample means for the two arms
  # sd: common standard deviation for the two arms
  # n: per-arm sample size 
  
  # simulate a vector of outcomes for each arm
  y_0 <- rnorm(n = n, mean = mu0, sd = sd)
  y_1 <- rnorm(n = n, mean = mu1, sd = sd)
  
  # sample mean outcome for each arm
  ybar_0 <- mean(y_0)
  ybar_1 <- mean(y_1)
  
  # sample mean difference (ie treatment effect for this sample)
  deltahat <- ybar_1 - ybar_0
  
  return(deltahat)
}
```

### Power calculation function

Write a power calculation function that repeatedly simulates the data and stores the treatment effect for each replicate in the vector 'deltas'. Then find the standard error and find the power of the simulated trial, i.e. the probability of rejecting the null, by getting Z-statistics for all simulated deltas and then calculating what proportion of these are significant.

```{r}
power_sim <- function(mu0, mu1, sd, n, nrep = 10000){
  # mu0, mu1: outcome means for each arm
  # sd: common standard deviation for outcomes
  # n: number of participants per arm
  # nrep: number of replicates when simulating vector of deltas 
  
  deltas <- replicate(nrep, data_sim(mu0, mu1, sd = sd, n))
  
  se <- sqrt(2 * sd^2 / n)
  z_scores <- deltas / se
  power <- mean(abs(z_scores) > qnorm(1 - 0.05 / 2))
  
  return(power)
}
```

Try the function with different standard deviations and treatment effects

```{r}
power_sim(mu0 = 2, mu1 = 2.5, sd = 0.8, n = 100)

power_sim(mu0 = 2, mu1 = 2.1, sd = 0.1, n = 20)
```

## Plots

### Trial power against different standard deviations

```{r}
sd_vals <- seq(0,1, by = 0.1)
n_vals <- c(10,50,100)

power_sd <- matrix(nrow = length(sd_vals), ncol = length(n_vals))

for (j in 1:length(n_vals)) { 
  for (i in 1:length(sd_vals)){
    
  power_sd[i,j] <- power_sim(mu0 = 2, mu1 = 2.05, sd = sd_vals[i], n = n_vals[j])
  
  }
}

plot(sd_vals, power_sd[,1], type = 'l', lwd = 2, 
     xlab = 'Standard deviation', ylab = 'Power', main = 'Power against standard deviation')
lines(sd_vals, power_sd[,2], lwd = 2, col = 'blue')
lines(sd_vals, power_sd[,3], lwd = 2, col = 'darkgreen')
abline(h = 0.8, lty = 2)

legend('topright', c('n = 50', 'n = 10', 'n = 100'), col = c('black', 'blue', 'darkgreen'), lwd = 2, title = 'sample size per arm')
```

### Trial power against sample size

```{r}
n_vals <- seq(10,100, by = 5)
delta_vals <- c(0.01, 0.2, 0.5)
power_n <- numeric(length = length(n_vals))

for (i in 1:length(n_vals)) {
  power_n[i] <- power_sim(mu0 = 2, mu1 = 2.2, sd = 0.3, n = n_vals[i])
}

plot(n_vals, power_n, type = 'l',
     xlab = 'Sample size per arm', ylab = 'Power', main = 'Power against per-arm sample size',
     sub = 'Treatment effect size = 0.2')
abline(h = 0.8, lty =2)
```

```{r}
n_vals <- seq(10,100, by = 5)
delta_vals <- c(0.01, 0.2, 0.5)

power_n <- matrix(nrow = length(delta_vals), ncol = length(n_vals))

for(j in 1:length(delta_vals)){
  delta = delta_vals[j]
  for (i in 1:length(n_vals)) {
    power_n[i, j] <- power_sim(mu0 = 2, mu1 = 2 + delta, sd = 0.3, n = n_vals[i])
  }
}

plot(n_vals, power_n, type = 'l',
     xlab = 'Sample size per arm', ylab = 'Power', main = 'Power against per-arm sample size',
     sub = 'Treatment effect size = 0.2')
abline(h = 0.8, lty =2)
```

### Trial power against true treatment effect

```{r}
delta_vals <- seq(0,2, by = 0.2)
power_10 <- numeric(length = length(delta_vals))
power_50 <- numeric(length = length(delta_vals))
power_100 <- numeric(length = length(delta_vals))

for (i in 1:length(delta_vals)) {
  mu1_i <- 2 + delta_vals[i]
  power_10[i] <- power_sim(mu0 = 2, mu1 = mu1_i, sd = 1, n = 10)
  power_50[i] <- power_sim(mu0 = 2, mu1 = mu1_i, sd = 1, n = 50)
  power_100[i] <- power_sim(mu0 = 2, mu1 = mu1_i, sd = 1, n = 100)
}

plot(delta_vals, power_50, type = 'l', lwd = 2, 
     xlab = 'Treatment effect size', ylab = 'Power', main = 'Power against treatment effect')
lines(delta_vals, power_10, col = 'blue', lwd = 2)
lines(delta_vals, power_100, col = 'darkgreen', lwd = 2)
abline(h = 0.8, lty = 2)

legend('bottomright', c('n = 50', 'n = 10', 'n = 100'), col = c('black', 'blue', 'darkgreen'), lwd = 2, title = 'sample size per arm')
```

## Unequal allocation ratio 

Generalised power expression:

$$
Power = 1 - \Phi[\Phi^{-1}(1-\alpha) - \frac{\delta_A - \delta_0}{\sqrt{\frac{(1+r)\sigma^2_0}{Nr}+\frac{(1+r)\sigma^2_1}{N}}}]
$$ {#eq-genpower}

where $r = \frac{n_0}{n_1}$ is the allocation ratio and $N = n_0 +n_1$ is the total sample size. $\delta_0$ is the treatment effect under the null hypothesis and $\delta_A$ is the postulated treatment difference.

The per-arm sample sizes can be obtained from the allocation ratio and total sample size through the equations

$$
n_0 = \frac{N}{1 + r} ,~~ n_1 = \frac{Nr}{1 + r}
$$

First, redefine the data simulation function to allow for different sample sizes

```{r}
data_sim_unequal <- function(mu0, mu1, sd, r, N){
  # mu0, mu1: sample means for the two arms
  # sd: common standard deviation for the two arms
  # N: total sample size (for both arms)
  
  n0 = round(N/(1+r))
  n1 = round((N*r)/(1+r))
  
  # simulate a vector of outcomes for each arm
  y_0 <- rnorm(n = n0, mean = mu0, sd = sd)
  y_1 <- rnorm(n = n1, mean = mu1, sd = sd)
  
  # sample mean outcome for each arm
  ybar_0 <- mean(y_0)
  ybar_1 <- mean(y_1)
  
  # sample mean difference (ie treatment effect for this sample)
  deltahat <- ybar_1 - ybar_0
  
  return(deltahat)
}

```

Now update the power calculation function to allow for unequal allocation

```{r}
power_sim_unequal <- function(mu0, mu1, sd, r, N, nrep = 10000){
  # mu0, mu1: outcome means for each arm
  # sd: common standard deviation for outcomes
  # r: allocation ratio (assuming n0>n1)
  # N: total sample size
  # nrep: number of replicates when simulating vector of deltas 
  
  deltas <- replicate(nrep, data_sim_unequal(mu0, mu1, sd = sd, r, N))
  
  var <- sd^2
  se <- sqrt( ((1+r)*var/(N*r)) + ((1+r)*var/(N)) )
  
  z_scores <- deltas / se
  power <- mean(abs(z_scores) > qnorm(1 - 0.05 / 2))
  
  return(power)
}
```

### Detectable effect size against allocation ratio

```{r}
# detectable effect size for passed parameters

allocs <- seq(1, 10, by = 1)
deltas <- numeric(length = length(allocs))

N <- 100
var <- 0.3^2

for(i in 1:length(allocs)){
  r <- allocs[i]
  deltas[i] <- sqrt( ((1+r)*var/(N*r)) + ((1+r)*var/(N)) ) * (qnorm(1-0.05/2)-qnorm(0.2))
  
}

plot(allocs, deltas, type = 'l', lwd = 2, xlab = 'Allocation ratio', ylab = 'Detecable effect size', main = 'Detectable effect size for different allocation ratios')
```

### Trial power against allocation ratio 

For a trial with 100 total participants, a true treatment effect of 0.2 and common sd of 0.3:

```{r}
allocs <- seq(1, 10, by = 1)
power_alloc <- numeric(length = length(allocs))

for(i in 1:length(allocs)){
  power_alloc[i] <- power_sim_unequal(2, 2.2, 0.3, r = allocs[i], N = 100)
  
}

plot(allocs, power_alloc, type = 'l', lwd = 2, xlab = 'Allocation ratio', ylab = 'Power',
     main = 'Trial power against allocation ratio')
abline(h = 0.8, lty = 2)
```
